{"version":3,"sources":["components/ListItem.module.scss","components/ListItem.tsx","components/List.tsx","pages/ListPage.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","ListItem","mode","label","useState","checked","setChecked","className","data-testid","styles","checkBtn","onClick","List","title","items","toggleMode","map","item","key","classNames","ListPage","list","setList","setMode","useEffect","fetchList","a","fetch","response","json","data","console","log","NoMatch","withRouter","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sGACAA,EAAOC,QAAU,CAAC,SAAW,6B,sQCShBC,EAAW,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,MAA4B,EAC3BC,oBAAkB,GADS,mBAClDC,EADkD,KACzCC,EADyC,KAKzD,OACI,wBAAIC,UAAU,YACA,SAATL,EACG,kBAAC,IAAD,CAAYM,cAAY,gBAExB,4BAAQD,UAAWE,IAAOC,SAAUC,QAP1B,kBAAML,GAAYD,IAOgCG,cAAY,aACnEH,EAAU,kBAAC,IAAD,CAAaG,cAAY,eAAkB,kBAAC,IAAD,CAAQA,cAAY,kBAGlF,0BAAMD,UAAU,QACXJ,KCdJS,EAAO,SAAC,GAAoD,IAAlDC,EAAiD,EAAjDA,MAAOC,EAA0C,EAA1CA,MAAOZ,EAAmC,EAAnCA,KAAMa,EAA6B,EAA7BA,WACvC,OACI,yBAAKR,UAAU,kCACX,wBAAIA,UAAU,QAAQM,GAEtB,wBAAIN,UAAU,SACTO,EAAME,KAAI,SAACC,EAAiBC,GAAlB,OACP,kBAAC,EAAD,eAAUA,IAAKA,GAASD,EAAxB,CAA8Bf,KAAMA,SAI5C,yBAAKK,UAAU,QACX,4BAAQA,UAAWY,IAAW,WAAY,CAAE,OAAmB,SAATjB,IAAoBS,QAASI,GAAY,kBAAC,IAAD,OAC/F,4BAAQR,UAAWY,IAAW,MAAO,CAAE,OAAmB,aAATjB,IAAwBS,QAASI,GAAY,kBAAC,IAAD,UCpBjGK,EAAW,WAAO,IAAD,EACFhB,mBAAuB,MADrB,mBACnBiB,EADmB,KACbC,EADa,OAEFlB,mBAAoB,QAFlB,mBAEnBF,EAFmB,KAEbqB,EAFa,KAM1BC,qBAAU,WACO,OAATH,GACAI,MAEL,CAACJ,IAEJ,IAAMI,EAAS,uCAAG,8BAAAC,EAAA,sEACSC,MAAM,8CADf,cACRC,EADQ,gBAEKA,EAASC,OAFd,OAERC,EAFQ,OAGdC,QAAQC,IAAIF,GACZR,EAAQ,CACJT,MAAO,WACPC,MAAO,CACH,CAAEX,MAAO,WACT,CAAEA,MAAO,YACT,CAAEA,MAAO,WATH,2CAAH,qDAcf,OACI,yBAAKI,UAAU,4BACVc,EACG,kBAAC,EAAD,iBACQA,EADR,CAEInB,KAAMA,EACNa,WA5BG,kBAAMQ,EAAiB,SAATrB,EAAkB,WAAa,YA+BpD,+CCjCV+B,EAAU,kBAAO,gDAkBRC,mBAhBf,WACI,OACI,yBAAK3B,UAAU,OACX,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAO4B,OAAK,EAACC,KAAK,KACd,kBAAC,EAAD,OAGJ,kBAAC,IAAD,KACI,kBAAC,EAAD,YCLAC,QACa,cAA7BC,OAAOC,SAASC,UAEiB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACrB,2DCXZC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,IAAD,KACI,kBAAC,EAAD,QAGRC,SAASC,eAAe,SD8HpB,kBAAmBC,WACnBA,UAAUC,cAAcC,MACnBC,MAAK,SAAAC,GACFA,EAAaC,gBAEhBC,OAAM,SAAAC,GACHvB,QAAQuB,MAAMA,EAAMC,c","file":"static/js/main.4607afb9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkBtn\":\"ListItem_checkBtn__2gP_x\"};","import React, { useState } from \"react\";\nimport { IListItem, IListMode } from \"../shared/types\";\nimport { DashCircle, Square, CheckSquare } from \"react-bootstrap-icons\";\n\nimport styles from \"./ListItem.module.scss\";\n\nexport interface IListItemProps extends IListItem {\n    mode: IListMode;\n}\n\nexport const ListItem = ({ mode, label }: IListItemProps) => {\n    const [checked, setChecked] = useState<boolean>(false);\n\n    const toggleChecked = () => setChecked(!checked);\n\n    return (\n        <li className=\"ListItem\">\n            {mode === \"edit\" ?\n                <DashCircle data-testid=\"delete-icon\" />\n                :\n                <button className={styles.checkBtn} onClick={toggleChecked} data-testid=\"check-btn\">\n                    {checked ? <CheckSquare data-testid=\"check-icon\" /> : <Square data-testid=\"uncheck-icon\" />}\n                </button>\n            }\n            <span className=\"ml-1\">\n                {label}\n            </span>\n        </li>\n    );\n};","import React from \"react\";\nimport { IList, IListMode, IListItem } from \"../shared/types\";\nimport classNames from \"classnames\";\nimport { Pencil, Cart } from \"react-bootstrap-icons\";\nimport { ListItem } from \"./ListItem\";\n\nexport interface IListProps extends IList {\n    mode: IListMode;\n    toggleMode: () => void;\n}\n\nexport const List = ({ title, items, mode, toggleMode }: IListProps) => {\n    return (\n        <div className=\"shadow rounded p-3 bg-stronger\">\n            <h2 className=\"mt-0\">{title}</h2>\n\n            <ul className=\"reset\">\n                {items.map((item: IListItem, key: number) =>\n                    <ListItem key={key} {...item} mode={mode} />\n                )}\n            </ul>\n\n            <div className=\"mt-3\">\n                <button className={classNames(\"btn mr-1\", { \"active\": mode === \"edit\" })} onClick={toggleMode}><Pencil /></button>\n                <button className={classNames(\"btn\", { \"active\": mode === \"shopping\" })} onClick={toggleMode}><Cart /></button>\n            </div>\n        </div>\n    );\n};","import React, { useState, useEffect } from \"react\";\nimport { IList, IListMode } from \"../shared/types\";\nimport { List } from \"../components/List\";\n\nexport const ListPage = () => {\n    const [list, setList] = useState<null | IList>(null);\n    const [mode, setMode] = useState<IListMode>(\"edit\");\n\n    const toggleMode = () => setMode(mode === \"edit\" ? \"shopping\" : \"edit\");\n\n    useEffect(() => {\n        if (list === null) {\n            fetchList();\n        }\n    }, [list]);\n\n    const fetchList = async () => {\n        const response = await fetch(\"https://jsonplaceholder.typicode.com/todos\");\n        const data = await response.json();\n        console.log(data);\n        setList({\n            title: \"New list\",\n            items: [\n                { label: \"Nutella\" },\n                { label: \"Müsli\" },\n                { label: \"Mehl\" }\n            ]\n        });\n    }\n\n    return (\n        <div className=\"ListPage container-fluid\">\n            {list ?\n                <List\n                    {...list}\n                    mode={mode}\n                    toggleMode={toggleMode}\n                />\n                :\n                <h4>Loading…</h4>}\n        </div>\n    );\n};","import React from \"react\";\nimport { withRouter, Switch, Route } from \"react-router-dom\";\n\nimport \"../styles/main.scss\";\nimport { ListPage } from \"../pages/ListPage\";\n\nconst NoMatch = () => (<h1>404 - Not found</h1>);\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Switch>\n                <Route exact path=\"/\">\n                    <ListPage />\n                </Route>\n\n                <Route>\n                    <NoMatch />\n                </Route>\n            </Switch>\n        </div>\n    );\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === \"localhost\" ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === \"[::1]\" ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            process.env.PUBLIC_URL,\n            window.location.href\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won\"t work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener(\"load\", () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let\"s check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        \"This web app is being served cache-first by a service \" +\n                            \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === \"installed\") {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                \"New content is available and will be used when all \" +\n                                    \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It\"s the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log(\"Content is cached for offline use.\");\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error(\"Error during service worker registration:\", error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can\"t reload the page.\n    fetch(swUrl, {\n        headers: { \"Service-Worker\": \"script\" }\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get(\"content-type\");\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf(\"javascript\") === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                \"No internet connection found. App is running in offline mode.\"\n            );\n        });\n}\n\nexport function unregister() {\n    if (\"serviceWorker\" in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister();\n            })\n            .catch(error => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { HashRouter as Router } from \"react-router-dom\";\n\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Router>\n            <App />\n        </Router>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}